import sublime
import sublime_plugin
import urllib
import xml.etree.ElementTree as ET

POGODASTATUSBAR_SETTING_FILE = 'PogodaStatusBar.sublime-settings'


class PogodaStatusBar(sublime_plugin.EventListener):
    # https://tech.yandex.ru/weather/doc/dg/concepts/translations-docpage/
    # –ò–∫–æ–Ω–∫–∏ –ø–æ–≥–æ–¥—ã
    _icons = {
        "clear": "üåû",
        "mostly-clear": "üå§",
        "partly-cloudy": "üå§",
        "overcast": "üå•",
        "partly-cloudy-and-light-rain": "üå¶",
        "partly-cloudy-and-rain": "üåß",
        "overcast-and-rain": "üåß",
        "overcast-thunderstorms-with-rain": "‚õà",
        "cloudy": "üå§",
        "cloudy-and-light-rain": "üå¶",
        "overcast-and-light-rain": "üå¶",
        "cloudy-and-rain": "üåß",
        "overcast-and-wet-snow": "üå®",
        "partly-cloudy-and-light-snow": "üå®",
        "partly-cloudy-and-snow": "üå®",
        "overcast-and-snow": "üå®",
        "cloudy-and-light-snow": "üå®",
        "overcast-and-light-snow": "üå®",
        "cloudy-and-snow": "üå®"
    }

    # –ò–∫–æ–Ω–∫–∏ —Ç—Ä–∞—Ñ–∏–∫–∞
    _ticons = {'green': 'üçè', 'yellow': 'üçã', 'red': 'üçÖ'}

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞: –∏–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
    _updateInterval = None
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞: —à–∞–±–ª–æ–Ω –≤—ã–≤–æ–¥–∞
    _template = None
    # –°—Ç—Ä–æ–∫–∞, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–≤–æ–¥–∏—Ç—Å—è –≤ statusbar
    _status = None
    # –ë—ã–ª–∞ –ª–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∞—Å—Å–∞
    _activated = False
    # –¢–µ–∫—É—â–∏–π view (–æ–±—ä–µ–∫—Ç Sublime)
    _view = None

    def on_activated_async(self, view):
        self._run(view)

    # –ó–∞–ø—É—Å–∫ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –æ–∫–Ω–∞ (view)
    def _run(self, view):
        self._view = view

        if not self._activated:
            settings = sublime.load_settings(POGODASTATUSBAR_SETTING_FILE)
            self._updateInterval = settings.get('update_interval', 600)
            self._template = settings.get('template', None)

            self._updateData()
            self._startTimer()

            self._activated = True

        self._showStatus()

    # –¶–∏–∫–ª–∏—á–µ—Å–∫–∏–π –∑–∞–ø—É—Å–∫ —Ç–∞–π–º–µ—Ä–∞
    def _startTimer(self):
        if self._updateData():
            self._showStatus()
            timeout = self._updateInterval
        else:
            # –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å, –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É
            timeout = 60

        sublime.set_timeout_async(lambda: self._startTimer(), timeout * 1e3)

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–≥–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    def _getData(self):
        try:
            url = "https://export.yandex.ru/bar/reginfo.xml"
            content = urllib.request.urlopen(url).read()
            return ET.fromstring(content)
        except (IOError, ET.ParseError):
            return None

    # –ó–Ω–∞—á–æ–∫ –ø–æ–≥–æ–¥—ã –∏–∑ —ç–ª–µ–º–µ–Ω—Ç–∞ XML
    def _getStatus(self, el):
        day_part = el.findall('day_part')[0]

        return self._icons.get(
            day_part.find('weather_code').text,
            day_part.find('weather_type').text
        )

    # –ò–∫–æ–Ω–∫–∞ —Ç—Ä–∞—Ñ–∏–∫–∞ –∏–∑ —ç–ª–µ–º–µ–Ω—Ç–∞ XML
    def _getTrafficIcon(self, el):
        return self._ticons[el.find('icon').text]

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–µ—à–∞ —Å—Ç—Ä–æ–∫–∏ statusbar
    def _updateData(self):
        xml = self._getData()

        if xml is not None:
            weather = xml.find('weather').find('day')
            title = weather.find('title').text
            status = self._getStatus(weather)
            temp = weather.findall('day_part')[0].find('temperature').text

            traffic = xml.find('traffic').find('region')
            tlevel = traffic.find('level').text
            ticon = self._getTrafficIcon(traffic)

            self._status = self._template % vars()
            return True
        else:
            self._status = None
            return False

    # –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç—É—Å –≤ —Ç–µ–∫—É—â–∏–π view
    def _showStatus(self):
        if self._status is not None:
            self._view.set_status('YandexPogoda', self._status)
